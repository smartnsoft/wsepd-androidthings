apply plugin: 'com.android.library'
apply plugin: "com.jfrog.bintray"
apply plugin: "maven"
apply plugin: "maven-publish"

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionName rootProject.ext.mavenArtifactVersion
    }
}

dependencies {
    compileOnly rootProject.ext.dependencies['androidthings']
    compileOnly ("com.android.support:support-annotations:27.1.1@jar")
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    title = "Android Things ePaper HAT Driver API"
    description "Javadoc for the Android Things ePaper HAT Driver"
    source = android.sourceSets.main.java.srcDirs

    options.charSet = "UTF-8"
    options.overview = "src/main/javadoc/overview.html"
    options.links = ["http://docs.oracle.com/javase/7/docs/api/", "http://d.android.com/reference/"]

    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompiler.classpath
        }
    }

    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("javadoc/")
    failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts
{
    archives javadocJar
    archives sourcesJar
}

def pomConfig = {
    licenses
    {
        license
        {
            name "MIT License (MIT)"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
}

publishing
{
    publications
    {
        ReleasePublication(MavenPublication)
        {
            artifact sourcesJar
            artifact javadocJar
            groupId rootProject.ext.mavenGroupId
            artifactId rootProject.ext.mavenArtifactId
            version rootProject.ext.mavenArtifactVersion

            pom.withXml
            {
                def root = asNode()
                root.appendNode("description", rootProject.ext.mavenDescription)
                root.appendNode("name", rootProject.ext.mavenArtifactId)
                root.appendNode("url", rootProject.ext.projectGitHubUrl)
                root.children().last() + pomConfig
            }
        }
    }
}

//https://gist.github.com/bugs84/b7887fb5d7f9f2d484b8
publishing.publications.all
{
    pom.withXml
    {
        asNode().dependencies."*".findAll()
        {
            it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
                dep.name == it.artifactId.text()
            }
        }.each
        {
            it.scope*.value = "compile"
        }
    }
}

bintray
{
    publications = ["ReleasePublication"]

    pkg
    {
        repo = "maven"
        name = rootProject.ext.mavenArtifactId
        userOrg = "smartnsoft"
        licenses = ["MIT"]
        vcsUrl = rootProject.ext.projectGitHubUrl + ".git"
        publish = true

        version
        {
            name = rootProject.ext.mavenArtifactVersion
            desc = rootProject.ext.mavenDescription
            vcsTag = rootProject.ext.mavenArtifactId + "-" + rootProject.ext.mavenArtifactVersion
        }
    }
}

uploadArchives
{
    repositories
    {
        mavenDeployer
        {
            repository(url: "https://api.bintray.com/maven/smartnsoft/maven/"+ rootProject.ext.mavenArtifactId + "/;publish=1")
            {
                authentication(userName: findProperty("bintrayUsername") ?: "", password: findProperty("bintrayKey") ?: "")
            }

            snapshotRepository(url: nexusSnapshotUrl)
            {
                authentication(userName: findProperty("nexusUsername") ?: "", password: findProperty("nexusPassword") ?: "")
            }

            pom.project
            {
                name rootProject.ext.mavenArtifactId
                groupId rootProject.ext.mavenGroupId
                artifactId rootProject.ext.mavenArtifactId
                version rootProject.ext.mavenArtifactVersion
                packaging "aar"
            }
        }
    }
}